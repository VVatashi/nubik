{
  "version": 3,
  "sources": ["../src/js/audio.js", "../src/js/graphics.js", "../src/js/game.js"],
  "sourcesContent": ["export class AudioSystem {\r\n    constructor() {\r\n        const context = new AudioContext();\r\n\r\n        const gainNode = context.createGain();\r\n        gainNode.connect(context.destination);\r\n        gainNode.gain.value = 0.2;\r\n\r\n        this.context = context;\r\n        this.gainNode = gainNode;\r\n    }\r\n\r\n    resume() {\r\n        const { context } = this;\r\n        context.resume();\r\n\r\n        return this;\r\n    }\r\n\r\n    suspend() {\r\n        const { context } = this;\r\n        context.suspend();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {AudioBuffer} buffer \r\n     */\r\n    play(buffer, loop = false) {\r\n        const { context, gainNode } = this;\r\n\r\n        const source = context.createBufferSource();\r\n        source.buffer = buffer;\r\n        source.loop = loop;\r\n        source.connect(gainNode);\r\n        source.start();\r\n\r\n        return this;\r\n    }\r\n}\r\n", "export class Renderbuffer {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(context, width, height) {\r\n        const handle = context.createRenderbuffer();\r\n        context.bindRenderbuffer(context.RENDERBUFFER, handle);\r\n        context.renderbufferStorageMultisample(context.RENDERBUFFER, context.getParameter(context.MAX_SAMPLES), context.RGBA8, width, height);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle } = this;\r\n\r\n        context.bindRenderbuffer(context.RENDERBUFFER, handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteRenderbuffer(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Framebuffer {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(context, width, height) {\r\n        const handle = context.createFramebuffer();\r\n        context.bindFramebuffer(context.FRAMEBUFFER, handle);\r\n\r\n        context.viewport(0, 0, width, height);\r\n\r\n        context.bindFramebuffer(context.FRAMEBUFFER, null);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n\r\n    attachTexture(texture) {\r\n        const { context, attachment } = this;\r\n\r\n        this.bind();\r\n\r\n        texture.bind();\r\n        context.framebufferTexture2D(context.FRAMEBUFFER, context.COLOR_ATTACHMENT0, context.TEXTURE_2D, texture.handle, 0);\r\n        this.attachment = texture;\r\n\r\n        this.unbind();\r\n\r\n        attachment?.delete();\r\n\r\n        return this;\r\n    }\r\n\r\n    attachRenderbuffer(renderbuffer) {\r\n        const { context, attachment } = this;\r\n\r\n        this.bind();\r\n\r\n        renderbuffer.bind();\r\n        context.framebufferRenderbuffer(context.FRAMEBUFFER, context.COLOR_ATTACHMENT0, context.RENDERBUFFER, renderbuffer.handle);\r\n        this.attachment = renderbuffer;\r\n\r\n        this.unbind();\r\n\r\n        attachment?.delete();\r\n\r\n        return this;\r\n    }\r\n\r\n    resize(width, height) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        context.viewport(0, 0, width, height);\r\n\r\n        this.unbind();\r\n\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        return this;\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle } = this;\r\n\r\n        context.bindFramebuffer(context.FRAMEBUFFER, handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    unbind() {\r\n        const { context } = this;\r\n\r\n        context.bindFramebuffer(context.FRAMEBUFFER, null);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Framebuffer} framebuffer\r\n     */\r\n    blit(framebuffer) {\r\n        const { context, width, height } = this;\r\n\r\n        context.bindFramebuffer(context.READ_FRAMEBUFFER, this.handle);\r\n        context.bindFramebuffer(context.DRAW_FRAMEBUFFER, framebuffer.handle);\r\n        context.blitFramebuffer(0, 0, width, height, 0, 0, framebuffer.width, framebuffer.height, context.COLOR_BUFFER_BIT, context.LINEAR);\r\n        context.bindFramebuffer(context.READ_FRAMEBUFFER, null);\r\n        context.bindFramebuffer(context.DRAW_FRAMEBUFFER, null);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteFramebuffer(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Shader {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} type\r\n     * @param {string} source\r\n     */\r\n    constructor(context, type, source) {\r\n        const handle = context.createShader(type);\r\n        context.shaderSource(handle, source);\r\n        context.compileShader(handle);\r\n\r\n        if (!context.getShaderParameter(handle, context.COMPILE_STATUS)) {\r\n            throw new Error(\"Can't compile shader: \" + context.getShaderInfoLog(handle));\r\n        }\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteShader(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class ShaderProgram {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {string} vertexShaderSource\r\n     * @param {string} fragmentShaderSource\r\n     */\r\n    constructor(context, vertexShaderSource, fragmentShaderSource) {\r\n        const vertexShader = new Shader(context, context.VERTEX_SHADER, vertexShaderSource);\r\n        const fragmentShader = new Shader(context, context.FRAGMENT_SHADER, fragmentShaderSource);\r\n\r\n        const handle = context.createProgram();\r\n        context.attachShader(handle, vertexShader.handle);\r\n        context.attachShader(handle, fragmentShader.handle);\r\n        context.linkProgram(handle);\r\n\r\n        if (!context.getProgramParameter(handle, context.LINK_STATUS)) {\r\n            throw new Error(\"Can't link shader program: \" + context.getProgramInfoLog(handle));\r\n        }\r\n\r\n        vertexShader.delete();\r\n        fragmentShader.delete();\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.uniformLocationCache = {};\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle } = this;\r\n\r\n        context.useProgram(handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    getUniformLocation(name) {\r\n        const { context, handle, uniformLocationCache } = this;\r\n\r\n        if (name in uniformLocationCache) return uniformLocationCache[name];\r\n\r\n        return uniformLocationCache[name] = context.getUniformLocation(handle, name);\r\n    }\r\n\r\n    setUniform(name, value) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        const location = this.getUniformLocation(name);\r\n        if (typeof value === 'boolean') {\r\n            context.uniform1i(location, value ? 1 : 0);\r\n        } else {\r\n            context.uniform1f(location, value);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    setUniformInteger(name, value) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        const location = this.getUniformLocation(name);\r\n        context.uniform1i(location, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    setUniformMatrix(name, value, transpose = false) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        const location = this.getUniformLocation(name);\r\n        context.uniformMatrix4fv(location, transpose, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteProgram(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Texture {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} type\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(context, type, width, height, internalFormat = context.RGBA8) {\r\n        const handle = context.createTexture();\r\n        context.activeTexture(context.TEXTURE0);\r\n        context.bindTexture(type, handle);\r\n\r\n        context.texImage2D(type, 0, internalFormat, width, height, 0, context.RGBA, context.UNSIGNED_BYTE, null);\r\n\r\n        context.texParameteri(type, context.TEXTURE_WRAP_S, context.CLAMP_TO_EDGE);\r\n        context.texParameteri(type, context.TEXTURE_WRAP_T, context.CLAMP_TO_EDGE);\r\n        context.texParameteri(type, context.TEXTURE_WRAP_R, context.CLAMP_TO_EDGE);\r\n\r\n        context.texParameteri(type, context.TEXTURE_MIN_FILTER, context.LINEAR);\r\n        context.texParameteri(type, context.TEXTURE_MAG_FILTER, context.LINEAR);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.type = type;\r\n    }\r\n\r\n    bind(textureUnit = 0) {\r\n        const { context, handle, type } = this;\r\n\r\n        context.activeTexture(textureUnit + context.TEXTURE0);\r\n        context.bindTexture(type, handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {HTMLImageElement} image\r\n     */\r\n    setImage(image) {\r\n        const { context, type } = this;\r\n\r\n        this.bind();\r\n\r\n        context.texSubImage2D(type, 0, 0, 0, context.RGBA, context.UNSIGNED_BYTE, image);\r\n        context.texParameteri(type, context.TEXTURE_MIN_FILTER, context.LINEAR_MIPMAP_LINEAR);\r\n        context.generateMipmap(type);\r\n\r\n        return this;\r\n    }\r\n\r\n    setParameter(parameter, value) {\r\n        const { context, type } = this;\r\n\r\n        this.bind();\r\n        context.texParameteri(type, parameter, value);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteTexture(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Buffer {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} type\r\n     * @param {Float32Array|Uint16Array} data\r\n     */\r\n    constructor(context, type, data, usage = context.STATIC_DRAW) {\r\n        const handle = context.createBuffer();\r\n        context.bindBuffer(type, handle);\r\n        context.bufferData(type, data, usage);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n        this.type = type;\r\n        this.usage = usage;\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle, type } = this;\r\n\r\n        context.bindBuffer(type, handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Float32Array|Uint16Array} data\r\n     */\r\n    setData(data) {\r\n        const { context, type } = this;\r\n\r\n        this.bind();\r\n\r\n        context.bufferData(type, data, this.usage);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Float32Array|Uint16Array} data\r\n     * @param {number} offset\r\n     * @param {number} count\r\n     */\r\n    setDataRange(data, offset, count) {\r\n        const { context, type } = this;\r\n\r\n        this.bind();\r\n\r\n        context.bufferSubData(type, offset, data, 0, count);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteBuffer(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class VertexAttribute {\r\n    /**\r\n     * @param {number} elements\r\n     * @param {number} type\r\n     * @param {boolean} normalized\r\n     * @param {number} offset\r\n     * @param {number} stride\r\n     */\r\n    constructor(elements, type, normalized, stride, offset) {\r\n        this.elements = elements;\r\n        this.type = type;\r\n        this.normalized = normalized;\r\n        this.stride = stride;\r\n        this.offset = offset;\r\n    }\r\n}\r\n\r\nexport class VertexArray {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {Buffer} buffer\r\n     * @param {VertexAttribute[]} vertexAttributes\r\n     */\r\n    constructor(context, buffer, vertexAttributes) {\r\n        const handle = context.createVertexArray();\r\n        context.bindVertexArray(handle);\r\n        buffer.bind();\r\n\r\n        for (let i = 0; i < vertexAttributes.length; i++) {\r\n            context.enableVertexAttribArray(i);\r\n\r\n            const vertexAttribute = vertexAttributes[i];\r\n            context.vertexAttribPointer(i, vertexAttribute.elements, vertexAttribute.type, vertexAttribute.normalized, vertexAttribute.stride, vertexAttribute.offset);\r\n        }\r\n\r\n        context.bindVertexArray(null);\r\n\r\n        this.context = context;\r\n        this.handle = handle;\r\n    }\r\n\r\n    bind() {\r\n        const { context, handle } = this;\r\n\r\n        context.bindVertexArray(handle);\r\n\r\n        return this;\r\n    }\r\n\r\n    unnbind() {\r\n        const { context } = this;\r\n\r\n        context.bindVertexArray(null);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} vertexCount\r\n     */\r\n    draw(vertexCount) {\r\n        const { context } = this;\r\n\r\n        this.bind();\r\n\r\n        context.drawArrays(context.TRIANGLES, 0, vertexCount);\r\n\r\n        this.unnbind();\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        const { context, handle } = this;\r\n\r\n        if (handle !== null) {\r\n            context.deleteVertexArray(handle);\r\n            this.handle = null;\r\n        }\r\n    }\r\n}\r\n\r\nexport class Mesh {\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} vertexCount\r\n     * @param {VertexAttribute[]} vertexAttributes\r\n     * @param {number} usage\r\n     */\r\n    constructor(context, vertexCount, vertexAttributes, usage = context.STATIC_DRAW) {\r\n        let vertexElements = 0;\r\n        for (const vertexAttribute of vertexAttributes) {\r\n            vertexElements += vertexAttribute.elements;\r\n        }\r\n\r\n        const vertexBuffer = new Buffer(context, context.ARRAY_BUFFER, new Float32Array(vertexElements * vertexCount), usage);\r\n        const vertexArray = new VertexArray(context, vertexBuffer, vertexAttributes);\r\n\r\n        this.context = context;\r\n        this.vertexCount = vertexCount;\r\n        this.vertexArray = vertexArray;\r\n        this.vertexBuffer = vertexBuffer;\r\n    }\r\n\r\n    /**\r\n     * @param {Float32Array|Uint16Array} data\r\n     */\r\n    setData(data) {\r\n        this.vertexBuffer.setData(data);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Float32Array|Uint16Array} data\r\n     * @param {number} offset\r\n     * @param {number} count\r\n     */\r\n    setDataRange(data, offset, count) {\r\n        this.vertexBuffer.setDataRange(data, offset, count);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {number} vertexCount\r\n     */\r\n    draw(vertexCount = null) {\r\n        this.vertexArray.draw(vertexCount || this.vertexCount);\r\n\r\n        return this;\r\n    }\r\n\r\n    delete() {\r\n        this.vertexArray.delete();\r\n        this.vertexBuffer.delete();\r\n    }\r\n}\r\n\r\nexport class Font {\r\n    constructor() {\r\n        this.glyphs = {};\r\n    }\r\n\r\n    deserializeDataFromCSV(data, atlasWidth, atlasHeight) {\r\n        const lines = data.split('\\n');\r\n        for (const line of lines) {\r\n            const values = line.split(',');\r\n\r\n            if (values.length !== 10) continue;\r\n\r\n            const charCode = Number(values[0]);\r\n            const advance = Number(values[1]);\r\n            const planeLeft = Number(values[2]);\r\n            const planeBottom = 1.0 - Number(values[3]);\r\n            const planeRight = Number(values[4]);\r\n            const planeTop = 1.0 - Number(values[5]);\r\n            const atlasLeft = Number(values[6]) / atlasWidth;\r\n            const atlasBottom = 1.0 - Number(values[7]) / atlasHeight;\r\n            const atlasRight = Number(values[8]) / atlasWidth;\r\n            const atlasTop = 1.0 - Number(values[9]) / atlasHeight;\r\n\r\n            this.glyphs[charCode] = { charCode, advance, planeLeft, planeBottom, planeRight, planeTop, atlasLeft, atlasBottom, atlasRight, atlasTop };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    deserializeData(data) {\r\n        const buffer = new Float32Array(data);\r\n\r\n        let index = 0;\r\n        const count = buffer[index++];\r\n\r\n        for (let i = 0; i < count; i++) {\r\n            const charCode = buffer[index++];\r\n            const advance = buffer[index++];\r\n            const planeLeft = buffer[index++];\r\n            const planeBottom = buffer[index++];\r\n            const planeRight = buffer[index++];\r\n            const planeTop = buffer[index++];\r\n            const atlasLeft = buffer[index++];\r\n            const atlasBottom = buffer[index++];\r\n            const atlasRight = buffer[index++];\r\n            const atlasTop = buffer[index++];\r\n\r\n            this.glyphs[charCode] = { charCode, advance, planeLeft, planeBottom, planeRight, planeTop, atlasLeft, atlasBottom, atlasRight, atlasTop };\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    serializeData() {\r\n        const glyphs = Object.values(this.glyphs);\r\n        const data = [glyphs.length];\r\n        for (const glyph of glyphs) {\r\n            const { charCode, advance, planeLeft, planeBottom, planeRight, planeTop, atlasLeft, atlasBottom, atlasRight, atlasTop } = glyph;\r\n            data.push(charCode, advance, planeLeft, planeBottom, planeRight, planeTop, atlasLeft, atlasBottom, atlasRight, atlasTop);\r\n        }\r\n\r\n        return new Float32Array(data);\r\n    }\r\n}\r\n\r\nexport class Renderer {\r\n    MAX_VERTICES = 65535;\r\n    VERTEX_ELEMENTS = 8;\r\n\r\n    /**\r\n     * @param {WebGL2RenderingContext} context\r\n     * @param {number} width\r\n     * @param {number} height\r\n     */\r\n    constructor(context, width, height) {\r\n        this.context = context;\r\n        this.vertices = new Float32Array(this.VERTEX_ELEMENTS * this.MAX_VERTICES);\r\n        this.mesh = new Mesh(context, this.MAX_VERTICES, [\r\n            new VertexAttribute(2, context.FLOAT, false, 8 * 4, 0),\r\n            new VertexAttribute(2, context.FLOAT, false, 8 * 4, 2 * 4),\r\n            new VertexAttribute(4, context.FLOAT, false, 8 * 4, 4 * 4),\r\n        ], context.DYNAMIC_DRAW);\r\n\r\n        context.enable(context.BLEND);\r\n        context.blendFunc(context.SRC_ALPHA, context.ONE_MINUS_SRC_ALPHA);\r\n\r\n        this.resize(width, height);\r\n    }\r\n\r\n    resize(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        this.matrix = this.createOrthographicOffCenter(0, width, height, 0, -1, 1);\r\n\r\n        return this;\r\n    }\r\n\r\n    createOrthographicOffCenter(left, right, bottom, top, near, far) {\r\n        const leftRight = 1 / (left - right);\r\n        const bottomTop = 1 / (bottom - top);\r\n        const nearFar = 1 / (near - far);\r\n\r\n        const scaleX = -2 * leftRight;\r\n        const scaleY = -2 * bottomTop;\r\n        const scaleZ = 2 * nearFar;\r\n\r\n        const translateX = (left + right) * leftRight;\r\n        const translateY = (top + bottom) * bottomTop;\r\n        const translateZ = (far + near) * nearFar;\r\n\r\n        return [\r\n            scaleX, 0, 0, 0,\r\n            0, scaleY, 0, 0,\r\n            0, 0, scaleZ, 0,\r\n            translateX, translateY, translateZ, 1,\r\n        ];\r\n    }\r\n\r\n    clear(r, g, b, a) {\r\n        const { context } = this;\r\n\r\n        context.clearColor(r, g, b, a);\r\n        context.clear(context.COLOR_BUFFER_BIT);\r\n\r\n        return this;\r\n    }\r\n\r\n    beginGeometry() {\r\n        this.vertexCount = 0;\r\n\r\n        return this;\r\n    }\r\n\r\n    endGeometry() {\r\n        const { VERTEX_ELEMENTS, vertexCount, vertices } = this;\r\n\r\n        if (vertexCount === 0) return;\r\n\r\n        this.mesh.setDataRange(vertices, 0, VERTEX_ELEMENTS * vertexCount);\r\n        this.mesh.draw(vertexCount);\r\n\r\n        return this;\r\n    }\r\n\r\n    addVertex(\r\n        _x, _y,\r\n        _u, _v,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        const { VERTEX_ELEMENTS, vertexCount, vertices } = this;\r\n\r\n        for (let i = 0; i < VERTEX_ELEMENTS; i++)\r\n            vertices[VERTEX_ELEMENTS * vertexCount + i] = arguments[i];\r\n\r\n        this.vertexCount++;\r\n\r\n        return this;\r\n    }\r\n\r\n    drawTriangle(\r\n        ax, ay, au, av,\r\n        bx, by, bu, bv,\r\n        cx, cy, cu, cv,\r\n        r, g, b, a\r\n    ) {\r\n        const { MAX_VERTICES, vertexCount } = this;\r\n\r\n        if (vertexCount + 3 >= MAX_VERTICES) {\r\n            this.endGeometry().beginGeometry();\r\n        }\r\n\r\n        return this\r\n            .addVertex(ax, ay, au, av, r, g, b, a)\r\n            .addVertex(bx, by, bu, bv, r, g, b, a)\r\n            .addVertex(cx, cy, cu, cv, r, g, b, a);\r\n    }\r\n\r\n    drawQuad(\r\n        ax, ay, au, av,\r\n        bx, by, bu, bv,\r\n        cx, cy, cu, cv,\r\n        dx, dy, du, dv,\r\n        r, g, b, a\r\n    ) {\r\n        return this\r\n            .drawTriangle(\r\n                ax, ay, au, av,\r\n                bx, by, bu, bv,\r\n                cx, cy, cu, cv,\r\n                r, g, b, a\r\n            )\r\n            .drawTriangle(\r\n                ax, ay, au, av,\r\n                cx, cy, cu, cv,\r\n                dx, dy, du, dv,\r\n                r, g, b, a\r\n            );\r\n    }\r\n\r\n    drawRectangle(x, y, width, height, u0, v0, u1, v1, r, g, b, a) {\r\n        const ax = x;\r\n        const ay = y;\r\n\r\n        const bx = x + width;\r\n        const by = y;\r\n\r\n        const cx = x + width;\r\n        const cy = y + height;\r\n\r\n        const dx = x;\r\n        const dy = y + height;\r\n\r\n        return this.drawQuad(\r\n            ax, ay, u0, v0,\r\n            bx, by, u1, v0,\r\n            cx, cy, u1, v1,\r\n            dx, dy, u0, v1,\r\n            r, g, b, a\r\n        );\r\n    }\r\n\r\n    drawRectangleOffCenter(x, y, width, height, u0, v0, u1, v1, r, g, b, a) {\r\n        const halfWidth = width / 2;\r\n        const halfHeight = height / 2;\r\n\r\n        const ax = x - halfWidth;\r\n        const ay = y - halfHeight;\r\n\r\n        const bx = x + halfWidth;\r\n        const by = y - halfHeight;\r\n\r\n        const cx = x + halfWidth;\r\n        const cy = y + halfHeight;\r\n\r\n        const dx = x - halfWidth;\r\n        const dy = y + halfHeight;\r\n\r\n        return this.drawQuad(\r\n            ax, ay, u0, v0,\r\n            bx, by, u1, v0,\r\n            cx, cy, u1, v1,\r\n            dx, dy, u0, v1,\r\n            r, g, b, a\r\n        );\r\n    }\r\n\r\n    drawRotatedRectangleOffCenter(x, y, width, height, angle, u0, v0, u1, v1, r, g, b, a) {\r\n        const halfWidth = width / 2;\r\n        const halfHeight = height / 2;\r\n\r\n        const sinA = Math.sin(angle);\r\n        const cosA = Math.cos(angle);\r\n\r\n        const ax0 = -halfWidth;\r\n        const ay0 = -halfHeight;\r\n\r\n        const bx0 = halfWidth;\r\n        const by0 = -halfHeight;\r\n\r\n        const cx0 = halfWidth;\r\n        const cy0 = halfHeight;\r\n\r\n        const dx0 = -halfWidth;\r\n        const dy0 = halfHeight;\r\n\r\n        const ax = x + cosA * ax0 - sinA * ay0;\r\n        const ay = y + sinA * ax0 + cosA * ay0;\r\n\r\n        const bx = x + cosA * bx0 - sinA * by0;\r\n        const by = y + sinA * bx0 + cosA * by0;\r\n\r\n        const cx = x + cosA * cx0 - sinA * cy0;\r\n        const cy = y + sinA * cx0 + cosA * cy0;\r\n\r\n        const dx = x + cosA * dx0 - sinA * dy0;\r\n        const dy = y + sinA * dx0 + cosA * dy0;\r\n\r\n        return this.drawQuad(\r\n            ax, ay, u0, v0,\r\n            bx, by, u1, v0,\r\n            cx, cy, u1, v1,\r\n            dx, dy, u0, v1,\r\n            r, g, b, a\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} charCode\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawChar(font, x, y, charCode, size, r, g, b, a) {\r\n        const glyph = font.glyphs[charCode];\r\n        if (typeof glyph === 'undefined' || glyph === null) {\r\n            return this;\r\n        }\r\n\r\n        return this.drawRectangle(\r\n            x + size * glyph.planeLeft,\r\n            y + size * glyph.planeTop,\r\n            size * (glyph.planeRight - glyph.planeLeft),\r\n            size * (glyph.planeBottom - glyph.planeTop),\r\n            glyph.atlasLeft, glyph.atlasTop, glyph.atlasRight, glyph.atlasBottom,\r\n            r, g, b, a\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {string} str\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawString(font, x, y, str, size, r, g, b, a) {\r\n        let offset = 0;\r\n        for (let i = 0; i < str.length; i++) {\r\n            const charCode = str.charCodeAt(i);\r\n            const glyph = font.glyphs[charCode];\r\n            if (typeof glyph === 'undefined' || glyph === null) {\r\n                continue;\r\n            }\r\n\r\n            this.drawChar(font, x + offset, y, charCode, size, r, g, b, a);\r\n            offset += size * glyph.advance;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} maxWidth\r\n     * @param {string} str\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawStringOffCenter(font, x, y, str, size, r, g, b, a) {\r\n        const width = this.measureString(font, str, size);\r\n        return this.drawString(font, x - width / 2, y, str, size, r, g, b, a);\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {string} str\r\n     * @param {number} size\r\n     */\r\n    measureString(font, str, size) {\r\n        let width = 0;\r\n        for (let i = 0; i < str.length; i++) {\r\n            const charCode = str.charCodeAt(i);\r\n            const glyph = font.glyphs[charCode];\r\n            if (typeof glyph === 'undefined' || glyph === null) {\r\n                continue;\r\n            }\r\n\r\n            width += size * glyph.advance;\r\n        }\r\n\r\n        return width;\r\n    }\r\n\r\n    delete() {\r\n        this.mesh.delete();\r\n    }\r\n}\r\n\r\nexport class SpriteBatch {\r\n    /**\r\n     * @param {Renderer} renderer\r\n     */\r\n    constructor(renderer) {\r\n        this.renderer = renderer;\r\n        this.buckets = new Map();\r\n    }\r\n\r\n    begin() {\r\n        this.buckets.clear();\r\n\r\n        return this;\r\n    }\r\n\r\n    end() {\r\n        for (const [texture, commands] of this.buckets.entries()) {\r\n            texture.bind();\r\n            this.renderer.beginGeometry();\r\n\r\n            for (const { name, args } of commands)\r\n                this.renderer[name](...args);\r\n\r\n            this.renderer.endGeometry();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    addCommand(texture, name, args) {\r\n        const command = { name, args };\r\n\r\n        if (this.buckets.has(texture))\r\n            this.buckets.get(texture).push(command);\r\n        else\r\n            this.buckets.set(texture, [command]);\r\n\r\n        return this;\r\n    }\r\n\r\n    drawTriangle(\r\n        texture,\r\n        _ax, _ay, _au, _av,\r\n        _bx, _by, _bu, _bv,\r\n        _cx, _cy, _cu, _cv,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        return this.addCommand(texture, 'drawTriangle', [...arguments].slice(1));\r\n    }\r\n\r\n    drawQuad(\r\n        texture,\r\n        _ax, _ay, _au, _av,\r\n        _bx, _by, _bu, _bv,\r\n        _cx, _cy, _cu, _cv,\r\n        _dx, _dy, _du, _dv,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        return this.addCommand(texture, 'drawQuad', [...arguments].slice(1));\r\n    }\r\n\r\n    drawRectangle(\r\n        texture,\r\n        _x, _y, _width, _height,\r\n        _u0, _v0, _u1, _v1,\r\n        _r, _g, _b, _a) {\r\n        return this.addCommand(texture, 'drawRectangle', [...arguments].slice(1));\r\n    }\r\n\r\n    drawRectangleOffCenter(\r\n        texture,\r\n        _x, _y, _width, _height,\r\n        _u0, _v0, _u1, _v1,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        return this.addCommand(texture, 'drawRectangleOffCenter', [...arguments].slice(1));\r\n    }\r\n\r\n    drawRotatedRectangleOffCenter(\r\n        texture,\r\n        _x, _y, _width, _height, _angle,\r\n        _u0, _v0, _u1, _v1,\r\n        _r, _g, _b, _a\r\n    ) {\r\n        return this.addCommand(texture, 'drawRotatedRectangleOffCenter', [...arguments].slice(1));\r\n    }\r\n\r\n    /**\r\n     * @param {Texture} texture\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} charCode\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawChar(texture, _font, _x, _y, _charCode, _size, _r, _g, _b, _a) {\r\n        return this.addCommand(texture, 'drawChar', [...arguments].slice(1));\r\n    }\r\n\r\n    /**\r\n     * @param {Texture} texture\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {string} str\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawString(texture, _font, _x, _y, _str, _size, _r, _g, _b, _a) {\r\n        return this.addCommand(texture, 'drawString', [...arguments].slice(1));\r\n    }\r\n\r\n    /**\r\n     * @param {Texture} texture\r\n     * @param {Font} font\r\n     * @param {number} x\r\n     * @param {number} y\r\n     * @param {number} maxWidth\r\n     * @param {string} str\r\n     * @param {number} size\r\n     * @param {number} r\r\n     * @param {number} g\r\n     * @param {number} b\r\n     * @param {number} a\r\n     */\r\n    drawStringOffCenter(texture, _font, _x, _y, _str, _size, _r, _g, _b, _a) {\r\n        return this.addCommand(texture, 'drawStringOffCenter', [...arguments].slice(1));\r\n    }\r\n\r\n    /**\r\n     * @param {Font} font\r\n     * @param {string} str\r\n     * @param {number} size\r\n     */\r\n    measureString(font, str, size) {\r\n        return this.renderer.measureString(font, str, size);\r\n    }\r\n}\r\n", "import { AudioSystem } from './audio.js';\r\nimport { ShaderProgram, Framebuffer, Renderbuffer, Texture, Font, Renderer, SpriteBatch } from './graphics.js';\r\n\r\nclass GameObject {\r\n    get objectType() { return 'GameObject'; }\r\n\r\n    /**\r\n     * @param {number} deltaTime\r\n     */\r\n    update(deltaTime) { }\r\n\r\n    draw() { }\r\n}\r\n\r\nclass TileEntity extends GameObject {\r\n    get objectType() { return 'TileEntity'; }\r\n\r\n    constructor(x, y, typeId, group = null) {\r\n        super();\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n        this.typeId = typeId;\r\n        this.lifetime = 0;\r\n        this.isFalling = false;\r\n        this.fallSpeed = 0.5;\r\n        this.group = group;\r\n    }\r\n\r\n    /**\r\n     * @param {number} deltaTime\r\n     */\r\n    update(deltaTime) {\r\n        super.update(deltaTime);\r\n\r\n        this.lifetime += deltaTime;\r\n        if (!this.isFalling && this.lifetime > 2000)\r\n            this.isFalling = true;\r\n\r\n        if (this.isFalling)\r\n            this.y += deltaTime * this.fallSpeed / TILE_SIZE;\r\n\r\n        const EPSILON = 0.1;\r\n\r\n        const entityBelow = getTileEntityAt(this.x + EPSILON, this.y + 1);\r\n        if (getTileAt(this.x + EPSILON, this.y + 1) !== 0 || entityBelow !== null && entityBelow.group !== this.group) {\r\n            objectDeleteQueue.add(this);\r\n            playImpactSound();\r\n            setTileAt(this.x, this.y, this.typeId);\r\n        }\r\n    }\r\n\r\n    draw() {\r\n        super.draw();\r\n\r\n        const tileType = TILE_TYPES[this.typeId];\r\n        const textureName = tileType.texture;\r\n        const texture = textures[textureName];\r\n\r\n        spriteBatch.drawRectangle(texture, this.x * TILE_SIZE, (this.y - viewOffsetY) * TILE_SIZE, TILE_SIZE, TILE_SIZE, 0, 0, 1, 1, 1, 1, 1, 1);\r\n    }\r\n}\r\n\r\nclass Player extends GameObject {\r\n    get objectType() { return 'Player'; }\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.x = Math.floor(TILES_COLUMNS / 2);\r\n        this.y = 0;\r\n\r\n        this.moveSpeed = 0.25;\r\n        this.fallSpeed = 0.5;\r\n        this.isOnGround = true;\r\n    }\r\n\r\n    update(deltaTime) {\r\n        super.update(deltaTime);\r\n\r\n        const EPSILON = 0.1;\r\n\r\n        if (isKeyDown('KeyA') || isKeyDown('ArrowLeft')) {\r\n            this.x -= deltaTime * this.moveSpeed / TILE_SIZE;\r\n            breakTile(this.x, this.y + 0.5, deltaTime);\r\n        }\r\n\r\n        if (isKeyDown('KeyD') || isKeyDown('ArrowRight')) {\r\n            this.x += deltaTime * this.moveSpeed / TILE_SIZE;\r\n            breakTile(this.x + 1, this.y + 0.5, deltaTime);\r\n        }\r\n\r\n        if (isKeyDown('KeyS') || isKeyDown('ArrowDown')) {\r\n            for (const offset of [0.5, 0.25, 0.75]) {\r\n                if (breakTile(this.x + offset, this.y + 1, deltaTime))\r\n                    break;\r\n            }\r\n        }\r\n\r\n        if (isKeyDown('KeyW') || isKeyDown('ArrowUp'))\r\n            breakTile(this.x + 0.5, this.y - EPSILON, deltaTime);\r\n\r\n        if (this.x < 0)\r\n            this.x = 0;\r\n\r\n        if (this.x > TILES_COLUMNS - 1)\r\n            this.x = TILES_COLUMNS - 1;\r\n\r\n        if (getTileAt(this.x, this.y + EPSILON) !== 0 || getTileAt(this.x, this.y + 1 - EPSILON) !== 0\r\n            || getTileEntityAt(this.x, this.y + EPSILON) !== null || getTileEntityAt(this.x, this.y + 1 - EPSILON) !== null)\r\n            this.x = Math.ceil(this.x);\r\n\r\n        if (getTileAt(this.x + 1, this.y + EPSILON) !== 0 || getTileAt(this.x + 1, this.y + 1 - EPSILON) !== 0\r\n            || getTileEntityAt(this.x + 1, this.y + EPSILON) !== null || getTileEntityAt(this.x + 1, this.y + 1 - EPSILON) !== null)\r\n            this.x = Math.floor(this.x);\r\n\r\n        if (getTileAt(this.x + EPSILON, this.y + 1) !== 0 || getTileAt(this.x + 1 - EPSILON, this.y + 1) !== 0\r\n            || getTileEntityAt(this.x + EPSILON, this.y + 1) !== null || getTileEntityAt(this.x + 1 - EPSILON, this.y + 1) !== null) {\r\n            this.isOnGround = true;\r\n            this.y = Math.floor(this.y);\r\n        } else {\r\n            this.isOnGround = false;\r\n            this.y += deltaTime * this.fallSpeed / TILE_SIZE;\r\n        }\r\n\r\n        viewOffsetY = this.y - 5;\r\n    }\r\n\r\n    draw() {\r\n        super.draw();\r\n\r\n        spriteBatch.drawRectangle(textures['player'], this.x * TILE_SIZE, (this.y - viewOffsetY) * TILE_SIZE, TILE_SIZE, TILE_SIZE, 0, 0, 1, 1, 1, 1, 1, 1);\r\n    }\r\n}\r\n\r\nlet objectDeleteQueue = new Set();\r\n\r\nconst TILE_TYPES = {\r\n    1: { id: 1, texture: 'tile_sand', isMovable: true, breakTime: 100 },\r\n    2: { id: 2, texture: 'tile_dirt', isMovable: true, breakTime: 150 },\r\n    3: { id: 3, texture: 'tile_stone', isMovable: true, breakTime: 250 },\r\n    4: { id: 4, texture: 'tile_block', isMovable: false, breakTime: 1000 },\r\n};\r\n\r\nconst TILE_BLOCK = 4;\r\nconst TILES_COLUMNS = 7;\r\nconst TILE_SIZE = 64;\r\n\r\nconst tiles = [\r\n    0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0,\r\n    0, 0, 0, 0, 0, 0, 0,\r\n    1, 1, 1, 1, 1, 1, 1,\r\n];\r\n\r\nfunction getNextBlockType() {\r\n    if (Math.random() < 0.05)\r\n        return TILE_BLOCK;\r\n\r\n    return 1 + Math.floor(Math.random() * 3);\r\n}\r\n\r\nfor (let j = 0; j < 1000; j++) {\r\n    if (Math.random() < 0.1) {\r\n        tiles.push(...[TILE_BLOCK, TILE_BLOCK, getNextBlockType(), getNextBlockType(), getNextBlockType(), TILE_BLOCK, TILE_BLOCK]);\r\n\r\n        for (let i = 0; i < 7; i++)\r\n            tiles.push(getNextBlockType());\r\n    } else if (Math.random() < 0.1) {\r\n        tiles.push(...[getNextBlockType(), getNextBlockType(), TILE_BLOCK, TILE_BLOCK, TILE_BLOCK, getNextBlockType(), getNextBlockType()]);\r\n\r\n        for (let i = 0; i < 7; i++)\r\n            tiles.push(getNextBlockType());\r\n    } else if (Math.random() < 0.1) {\r\n        tiles.push(...[getNextBlockType(), TILE_BLOCK, getNextBlockType(), TILE_BLOCK, getNextBlockType(), TILE_BLOCK, getNextBlockType()]);\r\n\r\n        for (let i = 0; i < 7; i++)\r\n            tiles.push(getNextBlockType());\r\n    } else {\r\n        for (let i = 0; i < 7; i++)\r\n            tiles.push(getNextBlockType());\r\n    }\r\n}\r\n\r\nlet breakingTileX = -1;\r\nlet breakingTileY = -1;\r\nlet breakingTileProgress = 0;\r\n\r\nlet nextFallingBlockGroup = 0;\r\n\r\nfunction getTileAt(x, y) {\r\n    if (x < 0 || y < 0 || x > TILES_COLUMNS) return 0;\r\n\r\n    const i = Math.floor(x) + Math.floor(y) * TILES_COLUMNS;\r\n    if (i >= tiles.length) return 0;\r\n\r\n    return tiles[i];\r\n}\r\n\r\nfunction getTileEntityAt(x, y) {\r\n    for (const gameObject of gameObjects) {\r\n        if (gameObject.objectType !== 'TileEntity') continue;\r\n        if (gameObject.isFalling) continue;\r\n\r\n        if (gameObject.x <= x && gameObject.y <= y && gameObject.x + 1 >= x && gameObject.y + 1 >= y)\r\n            return gameObject;\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nfunction setTileAt(x, y, tileTypeId) {\r\n    if (x < 0 || y < 0 || x > TILES_COLUMNS) return;\r\n\r\n    const i = Math.floor(x) + Math.floor(y) * TILES_COLUMNS;\r\n    if (i >= tiles.length) return 0;\r\n\r\n    tiles[i] = tileTypeId;\r\n}\r\n\r\nfunction getAdjacentTilesOfSameType(x, y) {\r\n    const result = [];\r\n    const checked = [];\r\n    const index = Math.floor(x) + Math.floor(y) * TILES_COLUMNS;\r\n    const typeId = getTileAt(x, y);\r\n    const queue = [index];\r\n    while (queue.length) {\r\n        const tileIndex = queue.pop();\r\n        const tileX = tileIndex % TILES_COLUMNS;\r\n        const tileY = Math.floor(tileIndex / TILES_COLUMNS);\r\n        const tileTypeId = getTileAt(tileX, tileY);\r\n        if (tileTypeId !== typeId)\r\n            continue;\r\n\r\n        result.push({ x: tileX, y: tileY, index: tileIndex, typeId: tileTypeId, type: TILE_TYPES[tileTypeId] });\r\n\r\n        if (tileX > 0 && !checked.includes(tileIndex - 1))\r\n            queue.push(tileIndex - 1);\r\n\r\n        if (tileX < TILES_COLUMNS - 1 && !checked.includes(tileIndex + 1))\r\n            queue.push(tileIndex + 1);\r\n\r\n        if (tileY > 0 && !checked.includes(tileIndex - TILES_COLUMNS))\r\n            queue.push(tileIndex - TILES_COLUMNS);\r\n\r\n        if (!checked.includes(tileIndex + TILES_COLUMNS))\r\n            queue.push(tileIndex + TILES_COLUMNS);\r\n\r\n        checked.push(tileIndex);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction getTilesAbove(x, y) {\r\n    const result = [];\r\n    let typeId;\r\n    while ((typeId = getTileAt(x, y)) !== 0 && TILE_TYPES[typeId].isMovable) {\r\n        const tileIndex = Math.floor(x) + Math.floor(y) * TILES_COLUMNS;\r\n        result.push({ x, y, index: tileIndex, typeId, type: TILE_TYPES[typeId] });\r\n        y--;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction breakTile(x, y, deltaTime) {\r\n    const tileTypeId = getTileAt(x, y);\r\n    if (tileTypeId === 0) return false;\r\n\r\n    const tileX = Math.floor(x);\r\n    const tileY = Math.floor(y);\r\n    if (breakingTileX === tileX && breakingTileY === tileY) {\r\n        const breakTime = TILE_TYPES[tileTypeId].breakTime;\r\n        breakingTileProgress += deltaTime / breakTime;\r\n    } else {\r\n        breakingTileX = tileX;\r\n        breakingTileY = tileY;\r\n        breakingTileProgress = 0;\r\n    }\r\n\r\n    if (breakingTileProgress > 1) {\r\n        breakingTileX = -1;\r\n        breakingTileY = -1;\r\n        breakingTileProgress = 0;\r\n\r\n        const adjacentTiles = getAdjacentTilesOfSameType(x, y);\r\n        for (const { x, y } of adjacentTiles)\r\n            setTileAt(x, y, 0);\r\n\r\n        for (const { x: x0, y: y0 } of adjacentTiles)\r\n            for (const { x, y, typeId } of getTilesAbove(x0, y0 - 1)) {\r\n                setTileAt(x, y, 0);\r\n                gameObjects.push(new TileEntity(x, y, typeId, nextFallingBlockGroup));\r\n            }\r\n\r\n        nextFallingBlockGroup++;\r\n        playDigSound();\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nconst SCENE_VERTEX_SHADER_SOURCE = `#version 300 es\r\n\r\nuniform mat4 matrix;\r\n\r\nlayout(location = 0) in vec2 position;\r\nlayout(location = 1) in vec2 texCoords;\r\nlayout(location = 2) in vec4 color;\r\n\r\nout vec2 fragTexCoords;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    gl_Position = matrix * vec4(position, 0, 1);\r\n\r\n    fragTexCoords = texCoords;\r\n    fragColor = color;\r\n}\r\n`;\r\n\r\nconst SCENE_FRAGMENT_SHADER_SOURCE = `#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D colorTexture;\r\n\r\nin vec2 fragTexCoords;\r\nin vec4 fragColor;\r\n\r\nout vec4 color;\r\n\r\nvoid main() {\r\n    color = fragColor * texture(colorTexture, fragTexCoords);\r\n}\r\n`;\r\n\r\nconst FONT_VERTEX_SHADER_SOURCE = `#version 300 es\r\n\r\nuniform mat4 matrix;\r\n\r\nlayout(location = 0) in vec2 position;\r\nlayout(location = 1) in vec2 texCoords;\r\nlayout(location = 2) in vec4 color;\r\n\r\nout vec2 fragTexCoords;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n    gl_Position = matrix * vec4(position, 0.0, 1.0);\r\n\r\n    fragTexCoords = texCoords;\r\n    fragColor = color;\r\n}\r\n`;\r\n\r\nconst FONT_FRAGMENT_SHADER_SOURCE = `#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D msdfTexture;\r\nuniform float screenPxRange;\r\nuniform float outlineBias;\r\n\r\nin vec2 fragTexCoords;\r\nin vec4 fragColor;\r\n\r\nout vec4 color;\r\n\r\nfloat median(float r, float g, float b) {\r\n    return max(min(r, g), min(max(r, g), b));\r\n}\r\n\r\nvoid main() {\r\n    vec4 msd = texture(msdfTexture, fragTexCoords);\r\n\r\n    float hardDistance = median(msd.r, msd.g, msd.a);\r\n    float softDistance = msd.a;\r\n\r\n    float inner = screenPxRange * (hardDistance - 0.5) + 0.5;\r\n    float outer = screenPxRange * (softDistance - 0.5 + outlineBias) + 0.5;\r\n\r\n    float innerOpacity = clamp(inner, 0.0, 1.0);\r\n    float outerOpacity = clamp(outer, 0.0, 1.0);\r\n\r\n    color = fragColor * innerOpacity + vec4(vec3(0.0), 1.0) * outerOpacity;\r\n}\r\n`;\r\n\r\nconst BLUR_VERTEX_SHADER_SOURCE = `#version 300 es\r\n\r\nlayout(location = 0) in vec2 position;\r\nlayout(location = 1) in vec2 texCoords;\r\nlayout(location = 2) in vec4 color;\r\n\r\nout vec2 fragTexCoords;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(position, 0, 1);\r\n\r\n    fragTexCoords = texCoords;\r\n}\r\n`;\r\n\r\nconst BLUR_FRAGMENT_SHADER_SOURCE = `#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nconst float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\r\n\r\nuniform sampler2D colorTexture;\r\nuniform bool horizontal;\r\n\r\nin vec2 fragTexCoords;\r\n\r\nout vec4 color;\r\n\r\nvoid main() {\r\n    vec2 texelSize = 1.0 / vec2(textureSize(colorTexture, 0));\r\n    vec3 result = texture(colorTexture, fragTexCoords).rgb * weight[0];\r\n\r\n    if (horizontal) {\r\n        for (int i = 1; i < 5; i++) {\r\n            result += texture(colorTexture, fragTexCoords + vec2(texelSize.x * float(i), 0.0)).rgb * weight[i];\r\n            result += texture(colorTexture, fragTexCoords - vec2(texelSize.x * float(i), 0.0)).rgb * weight[i];\r\n        }\r\n    } else {\r\n        for (int i = 1; i < 5; i++) {\r\n            result += texture(colorTexture, fragTexCoords + vec2(0.0, texelSize.y * float(i))).rgb * weight[i];\r\n            result += texture(colorTexture, fragTexCoords - vec2(0.0, texelSize.y * float(i))).rgb * weight[i];\r\n        }\r\n    }\r\n\r\n    color = vec4(result, 1.0);\r\n}\r\n`;\r\n\r\nconst SCREEN_VERTEX_SHADER_SOURCE = `#version 300 es\r\n\r\nlayout(location = 0) in vec2 position;\r\nlayout(location = 1) in vec2 texCoords;\r\nlayout(location = 2) in vec4 color;\r\n\r\nout vec2 fragTexCoords;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(position, 0.0, 1.0);\r\n\r\n    fragTexCoords = texCoords;\r\n}\r\n`;\r\n\r\nconst SCREEN_FRAGMENT_SHADER_SOURCE = `#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nuniform sampler2D colorTexture;\r\nuniform sampler2D blurTexture;\r\n\r\nuniform float blurBrightness;\r\n\r\nin vec2 fragTexCoords;\r\n\r\nout vec4 color;\r\n\r\nvoid main() {\r\n    vec3 result = texture(colorTexture, fragTexCoords).rgb + blurBrightness * texture(blurTexture, fragTexCoords).rgb;\r\n    color = vec4(pow(result, vec3(1.0 / 2.2)), 1.0);\r\n}\r\n`;\r\n\r\n/** @type {HTMLCanvasElement} */\r\nlet canvas = null;\r\n\r\n/** @type {WebGL2RenderingContext} */\r\nlet context = null;\r\n\r\n/** @type {number} */\r\nlet prevTimestamp = null;\r\n\r\n/** @type {ShaderProgram} */\r\nlet sceneShaderProgram = null;\r\n\r\n/** @type {ShaderProgram} */\r\nlet screenShaderProgram = null;\r\n\r\n/** @type {ShaderProgram} */\r\nlet fontShaderProgram = null;\r\n\r\n/** @type {ShaderProgram} */\r\nlet blurShaderProgram = null;\r\n\r\n/** @type {Object.<string, Texture>} */\r\nconst textures = {};\r\n\r\n/** @type {Font} */\r\nlet font = null;\r\n\r\n/** @type {Renderer} */\r\nlet renderer = null;\r\n\r\n/** @type {SpriteBatch} */\r\nlet spriteBatch = null;\r\n\r\n/** @type {Framebuffer} */\r\nlet framebufferMultisample = null;\r\n\r\n/** @type {Framebuffer} */\r\nlet framebuffer = null;\r\n\r\n/** @type {Framebuffer} */\r\nlet pingFramebuffer = null;\r\n\r\n/** @type {Framebuffer} */\r\nlet pongFramebuffer = null;\r\n\r\n/** @type {AudioSystem} */\r\nlet audioSystem = null;\r\n\r\n/** @type {Player} */\r\nlet player = null;\r\n\r\n/** @type {GameObject[]} */\r\nlet gameObjects = [player = new Player()];\r\n\r\n/** @type {AudioBuffer[]} */\r\nlet impactSounds = [];\r\n\r\nlet nextImpactSound = 0;\r\n\r\nfunction playImpactSound() {\r\n    if (audioSystem === null || impactSounds.length === 0) return;\r\n\r\n    audioSystem.play(impactSounds[nextImpactSound % impactSounds.length]);\r\n    nextImpactSound++;\r\n}\r\n\r\n/** @type {AudioBuffer[]} */\r\nlet digSounds = [];\r\n\r\nlet nextDigSound = 0;\r\n\r\nfunction playDigSound() {\r\n    if (audioSystem === null || digSounds.length === 0) return;\r\n\r\n    audioSystem.play(digSounds[nextDigSound % digSounds.length]);\r\n    nextDigSound++;\r\n}\r\n\r\nasync function loadText(url) {\r\n    const response = await fetch(url);\r\n    return response.text();\r\n}\r\n\r\nasync function loadBinary(url) {\r\n    const response = await fetch(url);\r\n    return response.arrayBuffer();\r\n}\r\n\r\nfunction loadImage(url) {\r\n    return new Promise(resolve => {\r\n        const image = new Image();\r\n        image.addEventListener('load', () => resolve(image));\r\n        image.loading = 'eager';\r\n        image.src = url;\r\n    });\r\n}\r\n\r\nasync function loadAudio(url) {\r\n    const response = await fetch(url);\r\n    const buffer = await response.arrayBuffer();\r\n    return audioSystem.context.decodeAudioData(buffer);\r\n}\r\n\r\nfunction resize() {\r\n    const { clientWidth, clientHeight } = canvas;\r\n\r\n    canvas.width = clientWidth;\r\n    canvas.height = clientHeight;\r\n\r\n    renderer.resize(clientWidth, clientHeight);\r\n    framebufferMultisample.resize(clientWidth, clientHeight).attachRenderbuffer(new Renderbuffer(context, clientWidth, clientHeight));\r\n    framebuffer.resize(clientWidth, clientHeight).attachTexture(new Texture(context, context.TEXTURE_2D, clientWidth, clientHeight));\r\n    pingFramebuffer.resize(clientWidth, clientHeight).attachTexture(new Texture(context, context.TEXTURE_2D, clientWidth, clientHeight));\r\n    pongFramebuffer.resize(clientWidth, clientHeight).attachTexture(new Texture(context, context.TEXTURE_2D, clientWidth, clientHeight));\r\n}\r\n\r\nconst keys = {};\r\n\r\nfunction isKeyDown(code) {\r\n    return code in keys && keys[code] === true;\r\n}\r\n\r\nfunction isKeyUp(code) {\r\n    return !(code in keys) || keys[code] === false;\r\n}\r\n\r\nasync function main() {\r\n    canvas = document.getElementById('canvas');\r\n    if (canvas === null) return console.error('#canvas not found');\r\n\r\n    context = canvas.getContext('webgl2', { antialias: false });\r\n    if (context === null) return console.error(\"Can't create webgl context\");\r\n\r\n    sceneShaderProgram = new ShaderProgram(context, SCENE_VERTEX_SHADER_SOURCE, SCENE_FRAGMENT_SHADER_SOURCE);\r\n    screenShaderProgram = new ShaderProgram(context, SCREEN_VERTEX_SHADER_SOURCE, SCREEN_FRAGMENT_SHADER_SOURCE);\r\n    fontShaderProgram = new ShaderProgram(context, FONT_VERTEX_SHADER_SOURCE, FONT_FRAGMENT_SHADER_SOURCE);\r\n    blurShaderProgram = new ShaderProgram(context, BLUR_VERTEX_SHADER_SOURCE, BLUR_FRAGMENT_SHADER_SOURCE);\r\n\r\n    renderer = new Renderer(context, canvas.width, canvas.height);\r\n    spriteBatch = new SpriteBatch(renderer);\r\n    framebufferMultisample = new Framebuffer(context, canvas.clientWidth, canvas.clientHeight);\r\n    framebuffer = new Framebuffer(context, canvas.clientWidth, canvas.clientHeight);\r\n    pingFramebuffer = new Framebuffer(context, canvas.clientWidth, canvas.clientHeight);\r\n    pongFramebuffer = new Framebuffer(context, canvas.clientWidth, canvas.clientHeight);\r\n\r\n    await Promise.all([\r\n        ...['white', 'tile_dirt', 'tile_stone', 'tile_sand', 'tile_block', 'player',\r\n        ].map(name => loadImage(`./assets/${name}.png`).then(image => textures[name] = new Texture(context, context.TEXTURE_2D, image.width, image.height, context.SRGB8_ALPHA8).setImage(image).setParameter(context.TEXTURE_MAG_FILTER, context.NEAREST))),\r\n        loadImage('./assets/font.png').then(image => textures['font'] = new Texture(context, context.TEXTURE_2D, image.width, image.height, context.RGBA8).setImage(image)),\r\n        loadBinary('./assets/font.bin').then(fontData => font = new Font().deserializeData(fontData)),\r\n    ]);\r\n\r\n    document.addEventListener('contextmenu', event => event.preventDefault());\r\n    document.addEventListener('pointerdown', event => event.preventDefault());\r\n    document.addEventListener('pointermove', event => event.preventDefault());\r\n    document.addEventListener('pointerup', event => event.preventDefault());\r\n\r\n    document.addEventListener('click', event => {\r\n        event.preventDefault();\r\n\r\n        if (audioSystem === null) {\r\n            audioSystem = new AudioSystem();\r\n            audioSystem.resume();\r\n\r\n            loadAudio('./assets/bgm.mp3').then(buffer => audioSystem.play(buffer, true));\r\n\r\n            Promise.all([\r\n                loadAudio('./assets/footstep_carpet_000.mp3'),\r\n                loadAudio('./assets/footstep_carpet_001.mp3'),\r\n                loadAudio('./assets/footstep_carpet_002.mp3'),\r\n                loadAudio('./assets/footstep_carpet_003.mp3'),\r\n                loadAudio('./assets/footstep_carpet_004.mp3'),\r\n            ]).then(result => impactSounds = result);\r\n\r\n            Promise.all([\r\n                loadAudio('./assets/footstep_concrete_000.mp3'),\r\n                loadAudio('./assets/footstep_concrete_001.mp3'),\r\n                loadAudio('./assets/footstep_concrete_002.mp3'),\r\n                loadAudio('./assets/footstep_concrete_003.mp3'),\r\n                loadAudio('./assets/footstep_concrete_004.mp3'),\r\n            ]).then(result => digSounds = result);\r\n        }\r\n    });\r\n\r\n    document.addEventListener('keydown', event => keys[event.code] = true);\r\n    document.addEventListener('keyup', event => keys[event.code] = false);\r\n\r\n    resize();\r\n    addEventListener('resize', resize);\r\n    requestAnimationFrame(update);\r\n}\r\n\r\nconst MAX_DELTA_TIME = 1000 / 30;\r\n\r\nlet viewOffsetY = 0;\r\n\r\nfunction update(timestamp) {\r\n    requestAnimationFrame(update);\r\n\r\n    const deltaTime = Math.min((prevTimestamp !== null) ? timestamp - prevTimestamp : 0, MAX_DELTA_TIME);\r\n    prevTimestamp = timestamp;\r\n\r\n    for (const gameObject of gameObjects)\r\n        gameObject.update(deltaTime);\r\n\r\n    if (objectDeleteQueue.size > 0) {\r\n        gameObjects = gameObjects.filter(gameObject => !objectDeleteQueue.has(gameObject));\r\n        objectDeleteQueue.clear();\r\n    }\r\n\r\n    framebufferMultisample.bind();\r\n    renderer.clear(Math.pow(0.63, 2.2), Math.pow(0.88, 2.2), Math.pow(0.98, 2.2), 1);\r\n    sceneShaderProgram.bind().setUniformMatrix('matrix', renderer.matrix);\r\n\r\n    // Draw scene\r\n\r\n    spriteBatch.begin();\r\n\r\n    for (const gameObject of gameObjects)\r\n        gameObject.draw();\r\n\r\n    for (let i = 0; i < tiles.length; i++) {\r\n        const tileTypeId = tiles[i];\r\n        if (tileTypeId === 0) continue;\r\n\r\n        const x = i % TILES_COLUMNS;\r\n        const y = Math.floor(i / TILES_COLUMNS);\r\n\r\n        const tileType = TILE_TYPES[tileTypeId];\r\n        const textureName = tileType.texture;\r\n        const texture = textures[textureName];\r\n\r\n        if (breakingTileX === x && breakingTileY === y) {\r\n            spriteBatch.drawRectangle(texture, x * TILE_SIZE, (y - viewOffsetY) * TILE_SIZE, TILE_SIZE, TILE_SIZE, 0, 0, 1, 1, 1 - breakingTileProgress, 1 - breakingTileProgress, 1 - breakingTileProgress, 1 - breakingTileProgress * breakingTileProgress);\r\n        } else {\r\n            spriteBatch.drawRectangle(texture, x * TILE_SIZE, (y - viewOffsetY) * TILE_SIZE, TILE_SIZE, TILE_SIZE, 0, 0, 1, 1, 1, 1, 1, 1);\r\n        }\r\n    }\r\n\r\n    spriteBatch.end();\r\n\r\n    framebufferMultisample.unbind();\r\n    framebufferMultisample.blit(framebuffer);\r\n    framebufferMultisample.bind();\r\n    renderer.clear(0, 0, 0, 0);\r\n    sceneShaderProgram.bind().setUniformMatrix('matrix', renderer.matrix);\r\n\r\n    // Draw bloom objects\r\n\r\n    spriteBatch.begin();\r\n\r\n    for (const gameObject of gameObjects)\r\n        if (gameObject.objectType === 'TileEntity')\r\n            gameObject.draw();\r\n\r\n    spriteBatch.end();\r\n\r\n    framebufferMultisample.unbind();\r\n    framebufferMultisample.blit(pongFramebuffer);\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n        blurShaderProgram.bind().setUniform('horizontal', true);\r\n        pingFramebuffer.bind();\r\n        pongFramebuffer.attachment.bind();\r\n        renderer.beginGeometry();\r\n        renderer.drawRectangleOffCenter(0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1);\r\n        renderer.endGeometry();\r\n        pingFramebuffer.unbind();\r\n\r\n        blurShaderProgram.bind().setUniform('horizontal', false);\r\n        pongFramebuffer.bind();\r\n        pingFramebuffer.attachment.bind();\r\n        renderer.beginGeometry();\r\n        renderer.drawRectangleOffCenter(0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1);\r\n        renderer.endGeometry();\r\n        pongFramebuffer.unbind();\r\n    }\r\n\r\n    context.viewport(0, 0, renderer.width, renderer.height);\r\n    screenShaderProgram.bind().setUniformInteger('blurTexture', 1).setUniform('blurBrightness', (Math.sin(8 * timestamp / 1000) + 1) / 2);\r\n    framebuffer.attachment.bind();\r\n    pongFramebuffer.attachment.bind(1);\r\n    renderer.beginGeometry();\r\n    renderer.drawRectangleOffCenter(0, 0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1);\r\n    renderer.endGeometry();\r\n}\r\n\r\n(document.readyState === 'loading') ? document.addEventListener('DOMContentLoaded', main) : main();\r\n"],
  "mappings": "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",
  "names": ["AudioSystem", "context", "gainNode", "buffer", "loop", "source", "Renderbuffer", "context", "width", "height", "handle", "Framebuffer", "texture", "attachment", "renderbuffer", "framebuffer", "Shader", "type", "source", "ShaderProgram", "vertexShaderSource", "fragmentShaderSource", "vertexShader", "fragmentShader", "name", "uniformLocationCache", "value", "location", "transpose", "Texture", "internalFormat", "textureUnit", "image", "parameter", "Buffer", "data", "usage", "offset", "count", "VertexAttribute", "elements", "normalized", "stride", "VertexArray", "buffer", "vertexAttributes", "vertexAttribute", "vertexCount", "Mesh", "vertexElements", "vertexBuffer", "vertexArray", "Font", "atlasWidth", "atlasHeight", "lines", "line", "values", "charCode", "advance", "planeLeft", "planeBottom", "planeRight", "planeTop", "atlasLeft", "atlasBottom", "atlasRight", "atlasTop", "index", "glyphs", "glyph", "Renderer", "__publicField", "left", "right", "bottom", "top", "near", "far", "leftRight", "bottomTop", "nearFar", "scaleX", "scaleY", "scaleZ", "translateX", "translateY", "translateZ", "r", "g", "b", "a", "VERTEX_ELEMENTS", "vertices", "_x", "_y", "_u", "_v", "_r", "_g", "_b", "_a", "i", "ax", "ay", "au", "av", "bx", "by", "bu", "bv", "cx", "cy", "cu", "cv", "MAX_VERTICES", "dx", "dy", "du", "dv", "x", "y", "u0", "v0", "u1", "v1", "halfWidth", "halfHeight", "angle", "sinA", "cosA", "ax0", "ay0", "bx0", "by0", "cx0", "cy0", "dx0", "dy0", "font", "size", "str", "SpriteBatch", "renderer", "commands", "args", "command", "_ax", "_ay", "_au", "_av", "_bx", "_by", "_bu", "_bv", "_cx", "_cy", "_cu", "_cv", "_dx", "_dy", "_du", "_dv", "_width", "_height", "_u0", "_v0", "_u1", "_v1", "_angle", "_font", "_charCode", "_size", "_str", "GameObject", "deltaTime", "TileEntity", "x", "y", "typeId", "group", "TILE_SIZE", "EPSILON", "entityBelow", "getTileEntityAt", "getTileAt", "objectDeleteQueue", "playImpactSound", "setTileAt", "textureName", "TILE_TYPES", "texture", "textures", "spriteBatch", "viewOffsetY", "Player", "TILES_COLUMNS", "isKeyDown", "breakTile", "offset", "TILE_BLOCK", "tiles", "getNextBlockType", "j", "i", "breakingTileX", "breakingTileY", "breakingTileProgress", "nextFallingBlockGroup", "gameObject", "gameObjects", "tileTypeId", "getAdjacentTilesOfSameType", "result", "checked", "index", "queue", "tileIndex", "tileX", "tileY", "getTilesAbove", "breakTime", "adjacentTiles", "x0", "y0", "playDigSound", "SCENE_VERTEX_SHADER_SOURCE", "SCENE_FRAGMENT_SHADER_SOURCE", "FONT_VERTEX_SHADER_SOURCE", "FONT_FRAGMENT_SHADER_SOURCE", "BLUR_VERTEX_SHADER_SOURCE", "BLUR_FRAGMENT_SHADER_SOURCE", "SCREEN_VERTEX_SHADER_SOURCE", "SCREEN_FRAGMENT_SHADER_SOURCE", "canvas", "context", "prevTimestamp", "sceneShaderProgram", "screenShaderProgram", "fontShaderProgram", "blurShaderProgram", "font", "renderer", "framebufferMultisample", "framebuffer", "pingFramebuffer", "pongFramebuffer", "audioSystem", "player", "impactSounds", "nextImpactSound", "digSounds", "nextDigSound", "loadBinary", "url", "loadImage", "resolve", "image", "loadAudio", "buffer", "audioSystem", "resize", "clientWidth", "clientHeight", "canvas", "renderer", "framebufferMultisample", "Renderbuffer", "context", "framebuffer", "Texture", "pingFramebuffer", "pongFramebuffer", "keys", "isKeyDown", "code", "main", "canvas", "context", "sceneShaderProgram", "ShaderProgram", "SCENE_VERTEX_SHADER_SOURCE", "SCENE_FRAGMENT_SHADER_SOURCE", "screenShaderProgram", "SCREEN_VERTEX_SHADER_SOURCE", "SCREEN_FRAGMENT_SHADER_SOURCE", "fontShaderProgram", "FONT_VERTEX_SHADER_SOURCE", "FONT_FRAGMENT_SHADER_SOURCE", "blurShaderProgram", "BLUR_VERTEX_SHADER_SOURCE", "BLUR_FRAGMENT_SHADER_SOURCE", "renderer", "Renderer", "spriteBatch", "SpriteBatch", "framebufferMultisample", "Framebuffer", "framebuffer", "pingFramebuffer", "pongFramebuffer", "name", "loadImage", "image", "textures", "Texture", "loadBinary", "fontData", "font", "Font", "event", "audioSystem", "AudioSystem", "loadAudio", "buffer", "result", "impactSounds", "digSounds", "keys", "resize", "update", "MAX_DELTA_TIME", "viewOffsetY", "timestamp", "deltaTime", "prevTimestamp", "gameObject", "gameObjects", "objectDeleteQueue", "i", "tiles", "tileTypeId", "x", "TILES_COLUMNS", "y", "textureName", "TILE_TYPES", "texture", "breakingTileX", "breakingTileY", "TILE_SIZE", "breakingTileProgress"]
}
